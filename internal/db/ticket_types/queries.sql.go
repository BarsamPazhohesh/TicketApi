// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package ticket_types

import (
	"context"
	"database/sql"
)

const addTicketType = `-- name: AddTicketType :one
INSERT INTO ticket_types (title, description) VALUES (?, ?) RETURNING id
`

type AddTicketTypeParams struct {
	Title       string
	Description sql.NullString
}

func (q *Queries) AddTicketType(ctx context.Context, arg AddTicketTypeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addTicketType, arg.Title, arg.Description)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getAllActiveTicketTypes = `-- name: GetAllActiveTicketTypes :many
SELECT id, title, description, status, deleted FROM ticket_types
WHERE deleted = 0
AND status != 0
`

func (q *Queries) GetAllActiveTicketTypes(ctx context.Context) ([]TicketType, error) {
	rows, err := q.db.QueryContext(ctx, getAllActiveTicketTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketType
	for rows.Next() {
		var i TicketType
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTicketTypes = `-- name: GetAllTicketTypes :many
SELECT id, title, description, status, deleted FROM ticket_types
WHERE deleted = 0
`

func (q *Queries) GetAllTicketTypes(ctx context.Context) ([]TicketType, error) {
	rows, err := q.db.QueryContext(ctx, getAllTicketTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketType
	for rows.Next() {
		var i TicketType
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTicketTypesByID = `-- name: GetTicketTypesByID :one
SELECT id, title, description, status, deleted FROM ticket_types WHERE deleted = ?
`

func (q *Queries) GetTicketTypesByID(ctx context.Context, deleted int64) (TicketType, error) {
	row := q.db.QueryRowContext(ctx, getTicketTypesByID, deleted)
	var i TicketType
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Deleted,
	)
	return i, err
}
