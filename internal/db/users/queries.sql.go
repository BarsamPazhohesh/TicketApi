// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package users

import (
	"context"
)

const checkUserByID = `-- name: CheckUserByID :one
SELECT count(id) exist_of_id FROM users
WHERE deleted = 0
AND status != 0
AND id = ?
`

func (q *Queries) CheckUserByID(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUserByID, id)
	var exist_of_id int64
	err := row.Scan(&exist_of_id)
	return exist_of_id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, department_id) VALUES (?, ?) RETURNING id
`

type CreateUserParams struct {
	Username     string
	DepartmentID int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.DepartmentID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id FROM users
WHERE deleted = 0
AND status != 0
AND username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var id int64
	err := row.Scan(&id)
	return id, err
}
