// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: version.sql

package version

import (
	"context"
	"database/sql"
)

const createVersion = `-- name: CreateVersion :one
INSERT INTO app_versions (api_version, version, notes, is_current)
VALUES (?, ?, ?, ?)
RETURNING id, api_version, version, release_date, notes, is_current
`

type CreateVersionParams struct {
	ApiVersion string
	Version    string
	Notes      sql.NullString
	IsCurrent  int64
}

func (q *Queries) CreateVersion(ctx context.Context, arg CreateVersionParams) (AppVersion, error) {
	row := q.db.QueryRowContext(ctx, createVersion,
		arg.ApiVersion,
		arg.Version,
		arg.Notes,
		arg.IsCurrent,
	)
	var i AppVersion
	err := row.Scan(
		&i.ID,
		&i.ApiVersion,
		&i.Version,
		&i.ReleaseDate,
		&i.Notes,
		&i.IsCurrent,
	)
	return i, err
}

const getCurrentVersion = `-- name: GetCurrentVersion :one
SELECT id, api_version, version, release_date, notes, is_current FROM app_versions
WHERE api_version = ? AND is_current = 1
`

func (q *Queries) GetCurrentVersion(ctx context.Context, apiVersion string) (AppVersion, error) {
	row := q.db.QueryRowContext(ctx, getCurrentVersion, apiVersion)
	var i AppVersion
	err := row.Scan(
		&i.ID,
		&i.ApiVersion,
		&i.Version,
		&i.ReleaseDate,
		&i.Notes,
		&i.IsCurrent,
	)
	return i, err
}

const listVersions = `-- name: ListVersions :many
SELECT id, api_version, version, release_date, notes, is_current FROM app_versions
WHERE api_version = ?
ORDER BY release_date DESC
`

func (q *Queries) ListVersions(ctx context.Context, apiVersion string) ([]AppVersion, error) {
	rows, err := q.db.QueryContext(ctx, listVersions, apiVersion)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppVersion
	for rows.Next() {
		var i AppVersion
		if err := rows.Scan(
			&i.ID,
			&i.ApiVersion,
			&i.Version,
			&i.ReleaseDate,
			&i.Notes,
			&i.IsCurrent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
