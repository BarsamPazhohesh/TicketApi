// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package departments

import (
	"context"
	"database/sql"
)

const addDepartment = `-- name: AddDepartment :one
INSERT INTO departments (title, description) VALUES (?, ?) RETURNING id
`

type AddDepartmentParams struct {
	Title       string
	Description sql.NullString
}

func (q *Queries) AddDepartment(ctx context.Context, arg AddDepartmentParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addDepartment, arg.Title, arg.Description)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getAllActiveDepartments = `-- name: GetAllActiveDepartments :many
SELECT id, title, description, status, deleted FROM departments
WHERE deleted = 0
AND status != 0
`

func (q *Queries) GetAllActiveDepartments(ctx context.Context) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, getAllActiveDepartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDepartments = `-- name: GetAllDepartments :many
SELECT id, title, description, status, deleted FROM departments
WHERE deleted = 0
`

func (q *Queries) GetAllDepartments(ctx context.Context) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, getAllDepartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
