// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package departments

import (
	"context"
	"database/sql"
)

const addDepartment = `-- name: AddDepartment :one
INSERT INTO departments (title, description) VALUES (?, ?) RETURNING id
`

type AddDepartmentParams struct {
	Title       string
	Description sql.NullString
}

func (q *Queries) AddDepartment(ctx context.Context, arg AddDepartmentParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addDepartment, arg.Title, arg.Description)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const checkDepartmentByID = `-- name: CheckDepartmentByID :one
SELECT COUNT(id) AS exist_of_id
FROM departments
WHERE deleted = 0
AND status != 0
AND id = ?
`

func (q *Queries) CheckDepartmentByID(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkDepartmentByID, id)
	var exist_of_id int64
	err := row.Scan(&exist_of_id)
	return exist_of_id, err
}

const getAllActiveDepartments = `-- name: GetAllActiveDepartments :many
SELECT id, title, description, status, deleted FROM departments
WHERE deleted = 0
AND status != 0
`

func (q *Queries) GetAllActiveDepartments(ctx context.Context) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, getAllActiveDepartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDepartments = `-- name: GetAllDepartments :many
SELECT id, title, description, status, deleted FROM departments
WHERE deleted = 0
`

func (q *Queries) GetAllDepartments(ctx context.Context) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, getAllDepartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDepartmentByID = `-- name: GetDepartmentByID :one
SELECT id, title, description, status, deleted FROM departments WHERE deleted = ? AND status = ?
`

type GetDepartmentByIDParams struct {
	Deleted int64
	Status  int64
}

func (q *Queries) GetDepartmentByID(ctx context.Context, arg GetDepartmentByIDParams) (Department, error) {
	row := q.db.QueryRowContext(ctx, getDepartmentByID, arg.Deleted, arg.Status)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Deleted,
	)
	return i, err
}
