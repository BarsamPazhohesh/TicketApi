// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package ticket_statuses

import (
	"context"
	"database/sql"
)

const addTicketStatus = `-- name: AddTicketStatus :exec
INSERT INTO ticket_statuses (title, description) VALUES (?, ?)
`

type AddTicketStatusParams struct {
	Title       string
	Description sql.NullString
}

func (q *Queries) AddTicketStatus(ctx context.Context, arg AddTicketStatusParams) error {
	_, err := q.db.ExecContext(ctx, addTicketStatus, arg.Title, arg.Description)
	return err
}

const getActiveTicketStatusById = `-- name: GetActiveTicketStatusById :one
SELECT id, title, description, status, deleted FROM ticket_statuses
WHERE deleted = 0
AND status != 0
AND id = ?
`

func (q *Queries) GetActiveTicketStatusById(ctx context.Context, id int64) (TicketStatus, error) {
	row := q.db.QueryRowContext(ctx, getActiveTicketStatusById, id)
	var i TicketStatus
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Deleted,
	)
	return i, err
}

const getAllActiveTicketStatuses = `-- name: GetAllActiveTicketStatuses :many
SELECT id, title, description, status, deleted FROM ticket_statuses
WHERE deleted = 0
AND status != 0
`

func (q *Queries) GetAllActiveTicketStatuses(ctx context.Context) ([]TicketStatus, error) {
	rows, err := q.db.QueryContext(ctx, getAllActiveTicketStatuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketStatus
	for rows.Next() {
		var i TicketStatus
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
